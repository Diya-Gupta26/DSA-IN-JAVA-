import java.util.ArrayList;
import java.util.*;

class graph{
    int vertex;
    ArrayList<ArrayList<Integer> > al;
    
    graph(int num){
        vertex=num;
        al=new ArrayList<>();
        
        for(int i=0;i<vertex;i++)
        al.add(new ArrayList<Integer>());
    }
    
    void addEdge(int src,int destn){
        al.get(src).add(destn);
        al.get(destn).add(src);
    }
    void printAllNeigbours(){
        for(int i=0;i<al.get(i).size();i++)
        {
            for(int j=0; j<al.get(i).size() ;j++)
            System.out.print( al.get(i).get(j)+" ");
            
            System.out.println();
        }
    }
    
    void BFS(int start)
    {
    Queue<Integer> queue= new LinkedList<>();
    boolean isVisited[]= new boolean[vertex];
    
    queue.add(start);
    isVisited[start]= true;
    
    while(!queue.isEmpty())
        {
            int popValue= queue.poll();
            System.out.println( popValue+" ");
            
            for(int i=0; i<al.get(popValue).size() ;i++)
            {
                int value= al.get(popValue).get(i);
                if(!isVisited[value])
                {
                    queue.add(value);
                    isVisited[value]= true;
                }
            }
        }
        }
        
}
public class Main
{
	public static void main(String[] args) {
		graph g1= new graph(5);
		
		g1.addEdge(0,1);
		g1.addEdge(0,4);
		g1.addEdge(1,4);
		g1.addEdge(1,3);
		g1.addEdge(1,2);
		g1.addEdge(2,3);
		g1.addEdge(3,4);
		g1.BFS(0);
	}
}
