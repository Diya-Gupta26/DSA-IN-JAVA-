/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
class Node
{
  int value;
  Node prev, next;

    Node (int num)
  {
	value = num;
	prev = next = null;

  }

}
class DLL
{
  Node head;
  Node tail;

  void insertAtHead (int num)
  {
	Node n1 = new Node (num);

	if (head == null)
	  head = tail = n1;

	else
	  {
		n1.next = head;
		head.prev = n1;
		head = n1;
	  }
  }

  void insertAtTail (int num)
  {
	Node n1 = new Node (num);
	if (head == null)
	  head = tail = n1;

	else
	  {
		tail.next = n1;
		n1.prev = tail;      //n1.next=null;
		tail = n1;
	  }
  }

  void deleteAtHead ()
  {
	if (head == null)
	  return;

	else if (head == tail)
	  {
		head = tail = null;
	  }

	else
	  {
		head = head.next;
		head.prev = null;
	  }
  }

  void deleteAtTail ()
  {
	Node temp = head;

	if (head == null)
	  return;

	else if (head == tail)
	  {
		head = tail = null;
	  }

	else
	  {
		while (temp.next!= tail)
		  {
			temp = temp.next;
		  }

		temp.next = null;
		tail = temp;

	  }
  }

  void traverse ()
  {
	Node temp = head;

	if (head == null)
	  {
		return;
	  }

	else
	  {
		while (temp != null)
		  {
			System.out.println (temp.value);
			temp = temp.next;
		  }
	  }

  }
  void reverse ()
  {
	Node temp = tail;

	if (head == null)
	  return;

	else
	  {
		while (temp != null)
		  {
			System.out.println (temp.value);
			temp = temp.prev;
		  }
	  }
  }

  boolean search (int num)
  {

	Node temp = head;
	if (head == null)
	  return false;
  
		while (temp != null)
		  {
			if (temp.value == num)
			  return true;
			temp = temp.next;
		  }

			return false;
	  
  }
}

  public class Main
  {
	public static void main (String[]args)
	{
	  DLL l1 = new DLL ();


	    l1.insertAtTail (10);
	    l1.insertAtTail (20);
	    l1.insertAtTail (30);
	    l1.insertAtHead(5);
	    l1.deleteAtTail();
	    l1.deleteAtHead();

	    //System.out.println(l1.search (20));
	    l1.reverse();
	    System.out.println("and");
	    l1.traverse();

	}
  }
